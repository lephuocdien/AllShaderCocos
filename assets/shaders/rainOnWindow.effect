// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <cc-global>
  #if USE_LOCAL
    #include <cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>

  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;
  #endif
  float Circle(vec2 uv_p,vec2 p,float r , float rblur)
  {
    
    
    float len = length(uv_p - p);
    float c = smoothstep(r,r-rblur,len);
    return c;
  }
  float Smilely(vec2 uv , vec2 p, float size)
  {
      uv /= size;
      float mask = Circle(uv,vec2(0.0,0.0) ,0.4,0.01);
      mask -= Circle(uv,vec2(-0.13,0.1) ,0.07,0.01);
      mask -= Circle(uv,vec2(0.13,0.1) ,0.07,0.01);

      float mouth = Circle(uv,vec2(0.0,0.0) ,0.3,0.02);
      mouth -= Circle(uv,vec2(0.0,0.1) ,0.3,0.02);

      mask -=mouth;
      return mask;
  }
  float Band(float t , float start, float end , float blur)
  {
     float step1  = smoothstep(start- blur,start + blur,t);
     float step2  = smoothstep(end+ blur,end - blur,t);
     return step1 * step2;
  }
  float Rect(vec2 uv , float left,float right, float top,float bottom, float blur)
  {
    float band1 = Band(uv.x,left,right,blur);
    float band2 = Band(uv.y,top,bottom,blur);

    return band2 * band1;
  }
  vec4 frag () 
  {
    vec4 o = vec4(1, 1, 1, 1);
    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif
    vec3 color= vec3(1.0);
   
    o =vec4(vec3(color),1.0);
    ALPHA_TEST(o);
    return o;
  }
}%
