// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        radius: {
          value: 0.1,
          editor: {
            tooltip: "圆角半径"
          }
        }
        
        
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <cc-global>
  #if USE_LOCAL
    #include <cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () 
  {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>

  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;
  #endif
  
  #if ENABLE_ROUNDCORNER
  uniform RoundCorner {
    // 圆角半径
    float radius;
  };
  #endif

  vec4 frag ()
  {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif

    o *= color;
    ALPHA_TEST(o);
    #if ENABLE_ROUNDCORNER
    float circleRadius = clamp(0.0,0.5,radius);
    vec2 uv = uv0.xy - vec2(0.5,0.5); 
    float rx = (abs(uv.x) - (0.5 - circleRadius));
    float ry = (abs(uv.y) - (0.5 - circleRadius));
    float len = length(vec2(rx,ry));
    float mx = step(0.5 - circleRadius, abs(uv.x));
    float my = step(0.5 - circleRadius, abs(uv.y));
    float a =1.0 - step(circleRadius,len) *mx*my  * smoothstep(0.0,circleRadius *0.01,len-circleRadius);
    o = vec4(o.rgb,o.a*a);
    #endif
    return o;
  }
}%
